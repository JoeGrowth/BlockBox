<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Workflow Tracker</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f1f1f1;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            flex-wrap: wrap;
            gap: 40px;
            padding-top: 50px;
        }

        .workflow-box {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            padding: 30px;
            width: 280px;
            text-align: center;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .workflow-box:hover {
            transform: scale(1.05);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }

        .workflow-box h2 {
            color: #333;
            font-size: 22px;
            margin-bottom: 20px;
            font-weight: bold;
        }

        .input-box, .output-box {
            margin: 15px 0;
        }

        .input-box input, .output-box input {
            width: 100%;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #ccc;
            font-size: 14px;
            margin-top: 5px;
        }

        .button {
            margin-top: 20px;
            padding: 12px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .button:hover {
            background-color: #45a049;
        }

        .drag-item {
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            margin-bottom: 10px;
            border-radius: 5px;
            cursor: move;
            text-align: center;
            margin-top: 10px;
            margin-left: 5px;
            margin-right: 5px;
        }

        .drag-over {
            background-color: #f0f0f0;
            border: 2px dashed #4CAF50;
        }

        #opportunities-list {
            margin-top: 20px;
        }

        .opportunity-list-item {
            padding: 10px;
            background-color: #eee;
            margin: 5px 0;
            border-radius: 5px;
            cursor: move;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .opportunity-list-item:hover {
            background-color: #d5d5d5;
        }

        .opportunity-actions {
            display: flex;
            gap: 10px;
            font-size: 18px;
            color: #333;
        }

        .opportunity-actions i {
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .opportunity-actions i:hover {
            color: #4CAF50;
        }

        @media (max-width: 768px) {
            body {
                flex-direction: column;
                align-items: center;
                padding-top: 20px;
            }

            .workflow-box {
                width: 80%;
                max-width: 500px;
                margin-bottom: 30px;
            }
        }
    </style>
</head>
<body>

    <!-- Part 1: Opportunities -->
    <div class="workflow-box" id="opportunities-part">
        <h2>List of Opportunities</h2>
        <div id="opportunities-list">
            <!-- Dynamically added opportunities will appear here -->
        </div>
        <input type="text" id="new-opportunity" placeholder="Enter new opportunity">
        <button class="button" onclick="addOpportunity()">Add Opportunity</button>
    </div>

    <!-- Part 2: Offer Approval -->
    <div class="workflow-box" id="offer-approved" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h2>Waiting For Offer Approval</h2>
        <div id="offer-approved-content">
            <!-- Dropped opportunities will appear here -->
        </div>
    </div>

    <!-- Part 3: 1st Meeting -->
    <div class="workflow-box" id="meeting-approved" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h2>Delivery Mode</h2>
        <div id="meeting-approved-content">
            <!-- Dropped opportunities will appear here -->
        </div>
    </div>

    <!-- Part 4: Delivery Approved -->
    <div class="workflow-box" id="delivery-approved" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h2>Delivery Approval</h2>
        <div id="delivery-approved-content">
            <!-- Dropped opportunities will appear here -->
        </div>
    </div>

    <!-- Part 5: Service Concept Note -->
    <div class="workflow-box" id="service-concept" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h2>Consider it a Service</h2>
        <div id="service-concept-content">
            <!-- Dropped opportunities will appear here -->
        </div>
    </div>

    <!-- Part 6: Service Approved -->
    <div class="workflow-box" id="service-approved" ondrop="drop(event)" ondragover="allowDrop(event)">
        <h2>Add to Service Catalog</h2>
        <div id="service-approved-content">
            <!-- Dropped opportunities will appear here -->
        </div>
    </div>

    <script>
        // Load the stored opportunities from localStorage
        window.onload = function() {
            loadOpportunitiesFromLocalStorage();
            loadStagesFromLocalStorage();
        }

        // Allow the drag-over effect
        function allowDrop(ev) {
            ev.preventDefault();
            ev.target.classList.add("drag-over");
        }

        // Handle dragging the opportunity item
        function drag(ev) {
            ev.dataTransfer.setData("text", ev.target.id);
        }

        // Handle dropping the opportunity item to another stage
        function drop(ev) {
            ev.preventDefault();
            var data = ev.dataTransfer.getData("text");
            var draggedElement = document.getElementById(data);

            // If it's dropped onto the target (stage), append it there
            if (ev.target.classList.contains("workflow-box") && !ev.target.contains(draggedElement)) {
                ev.target.classList.remove("drag-over");  // Remove the drag-over effect
                ev.target.appendChild(draggedElement);  // Move the dragged item to the target
                
                // Update the stage in the localStorage without deleting
                const stageId = ev.target.id;
                const opportunityId = draggedElement.id;
                updateOpportunityStageInLocalStorage(opportunityId, stageId);

                saveStagesToLocalStorage(); // Save the new state of stages
            }
        }

        // Function to update the opportunity stage in localStorage
        function updateOpportunityStageInLocalStorage(opportunityId, newStage) {
            const opportunities = JSON.parse(localStorage.getItem('opportunities')) || [];

            // Update the stage of the opportunity
            opportunities.forEach(opportunity => {
                if (opportunity.id === opportunityId) {
                    opportunity.stage = newStage;
                }
            });

            // Save the updated opportunities back to localStorage
            localStorage.setItem('opportunities', JSON.stringify(opportunities));
        }

        // Function to add a new opportunity to the "Opportunities" part
        function addOpportunity() {
            const opportunityInput = document.getElementById('new-opportunity');
            const opportunityName = opportunityInput.value.trim();
            if (opportunityName !== "") {
                const opportunityId = 'opportunity-' + Date.now();
                const opportunityDiv = document.createElement('div');
                opportunityDiv.classList.add('opportunity-list-item');
                opportunityDiv.setAttribute('draggable', true);
                opportunityDiv.setAttribute('id', opportunityId);
                opportunityDiv.setAttribute('ondragstart', 'drag(event)');
                
                // Opportunity name and action icons
                opportunityDiv.innerHTML = `
                    ${opportunityName}
                    <div class="opportunity-actions">
                        <i class="fas fa-edit" onclick="editOpportunity(event, '${opportunityId}')"></i>
                        <i class="fas fa-trash" onclick="deleteOpportunity(event, '${opportunityId}')"></i>
                    </div>
                `;

                // Add the new opportunity to the opportunities list
                document.getElementById('opportunities-list').appendChild(opportunityDiv);

                // Save the opportunity to localStorage
                saveOpportunitiesToLocalStorage();

                opportunityInput.value = "";  // Clear the input field
            }
        }

        // Function to edit an opportunity
        function editOpportunity(event, opportunityId) {
            const opportunityItem = document.getElementById(opportunityId);
            const opportunityText = opportunityItem.firstChild.textContent.trim();

            // Prompt to edit the opportunity name
            const newOpportunityName = prompt("Edit Opportunity", opportunityText);
            if (newOpportunityName) {
                opportunityItem.firstChild.textContent = newOpportunityName;
                saveOpportunitiesToLocalStorage(); // Save after editing
            }
        }

        // Function to delete an opportunity
        function deleteOpportunity(event, opportunityId) {
            const opportunityItem = document.getElementById(opportunityId);
            opportunityItem.remove();
            saveOpportunitiesToLocalStorage(); // Save after deleting
        }

        // Save the opportunities to localStorage
        function saveOpportunitiesToLocalStorage() {
            const opportunities = [];
            document.querySelectorAll('#opportunities-list .opportunity-list-item').forEach(item => {
                opportunities.push({
                    id: item.id,
                    name: item.firstChild.textContent.trim(),
                    stage: 'opportunity' // Initial stage is always "opportunity"
                });
            });
            localStorage.setItem('opportunities', JSON.stringify(opportunities));
        }

        // Load the opportunities from localStorage
        function loadOpportunitiesFromLocalStorage() {
            const opportunities = JSON.parse(localStorage.getItem('opportunities')) || [];
            opportunities.forEach(opportunity => {
                const opportunityDiv = document.createElement('div');
                opportunityDiv.classList.add('opportunity-list-item');
                opportunityDiv.setAttribute('draggable', true);
                opportunityDiv.setAttribute('id', opportunity.id);
                opportunityDiv.setAttribute('ondragstart', 'drag(event)');

                opportunityDiv.innerHTML = `
                    ${opportunity.name}
                    <div class="opportunity-actions">
                        <i class="fas fa-edit" onclick="editOpportunity(event, '${opportunity.id}')"></i>
                        <i class="fas fa-trash" onclick="deleteOpportunity(event, '${opportunity.id}')"></i>
                    </div>
                `;
                document.getElementById('opportunities-list').appendChild(opportunityDiv);
            });
        }

        // Save stages to localStorage
        function saveStagesToLocalStorage() {
            const stages = {
                'offer-approved': [],
                'meeting-approved': [],
                'delivery-approved': [],
                'service-concept': [],
                'service-approved': []
            };

            document.querySelectorAll('.workflow-box').forEach(box => {
                const boxId = box.id;
                if (boxId !== 'opportunities-part') {
                    const items = [];
                    box.querySelectorAll('.opportunity-list-item').forEach(item => {
                        items.push(item.id);
                    });
                    stages[boxId] = items;
                }
            });

            localStorage.setItem('stages', JSON.stringify(stages));
        }

        // Load stages from localStorage
        function loadStagesFromLocalStorage() {
            const stages = JSON.parse(localStorage.getItem('stages')) || {};

            Object.keys(stages).forEach(stage => {
                const stageBox = document.getElementById(stage);
                const stageItems = stages[stage];
                stageItems.forEach(itemId => {
                    const item = document.getElementById(itemId);
                    if (item) {
                        stageBox.appendChild(item); // Move the opportunity to the stage
                    }
                });
            });
        }
    </script>

</body>
</html>
