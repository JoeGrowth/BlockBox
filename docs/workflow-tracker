<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Workflow Tracker</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 50px 20px 20px;
      background-color: #f1f1f1;
      display: flex;
      flex-wrap: wrap;
      gap: 40px;
      justify-content: center;
    }

    .workflow-box {
      background: #fff;
      border-radius: 10px;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
      padding: 30px;
      width: 280px;
      min-height: 200px;
      display: flex;
      flex-direction: column;
      align-items: center;
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .workflow-box:hover {
      transform: scale(1.05);
      box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
    }

    .workflow-box h2 {
      font-size: 22px;
      margin-bottom: 20px;
      color: #333;
    }

    .button {
      margin-top: 20px;
      padding: 12px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .button:hover {
      background-color: #45a049;
    }

    .opportunity-list-item {
      background: #eee;
      padding: 10px;
      border-radius: 5px;
      margin: 5px 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: move;
    }

    .opportunity-list-item:hover {
      background-color: #d5d5d5;
    }

    .opportunity-actions {
      display: flex;
      gap: 10px;
      font-size: 18px;
    }

    .opportunity-actions i {
      cursor: pointer;
      color: #333;
      transition: color 0.3s;
    }

    .opportunity-actions i:hover {
      color: #4CAF50;
    }

    .drag-over {
      background-color: #f0f0f0;
      border: 2px dashed #4CAF50;
    }

    @media (max-width: 768px) {
      body {
        flex-direction: column;
        align-items: center;
      }

      .workflow-box {
        width: 80%;
        max-width: 500px;
      }
    }
  </style>
</head>
<body>

  <div class="workflow-box" id="opportunities-part">
    <h2>List of Opportunities</h2>
    <div id="opportunities-list"></div>
    <input type="text" id="new-opportunity" placeholder="Enter new opportunity">
    <button class="button" onclick="addOpportunity()">Add Opportunity</button>
  </div>

  <div class="workflow-box" id="offer-approved" ondrop="drop(event)" ondragover="allowDrop(event)">
    <h2>Waiting For Offer Approval</h2>
    <div id="offer-approved-content"></div>
  </div>

  <div class="workflow-box" id="meeting-approved" ondrop="drop(event)" ondragover="allowDrop(event)">
    <h2>Delivery Mode</h2>
    <div id="meeting-approved-content"></div>
  </div>

  <div class="workflow-box" id="delivery-approved" ondrop="drop(event)" ondragover="allowDrop(event)">
    <h2>Delivery Approval</h2>
    <div id="delivery-approved-content"></div>
  </div>

  <div class="workflow-box" id="service-concept" ondrop="drop(event)" ondragover="allowDrop(event)">
    <h2>Consider it a Service</h2>
    <div id="service-concept-content"></div>
  </div>

  <div class="workflow-box" id="service-approved" ondrop="drop(event)" ondragover="allowDrop(event)">
    <h2>Add to Service Catalog</h2>
    <div id="service-approved-content"></div>
  </div>

  <script>
    window.onload = function() {
      loadOpportunitiesFromLocalStorage();
      loadStagesFromLocalStorage();
    };

    function allowDrop(ev) {
      ev.preventDefault();
      if (ev.target.classList.contains("workflow-box") || ev.target.classList.contains("workflow-box").firstChild) {
        ev.target.classList.add("drag-over");
      }
    }

    function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(ev) {
      ev.preventDefault();
      const data = ev.dataTransfer.getData("text");
      const draggedItem = document.getElementById(data);
      const container = ev.target.querySelector("div[id$='-content']") || ev.target;
      if (!container.contains(draggedItem)) {
        container.appendChild(draggedItem);
        const stageId = container.id;
        updateOpportunityStageInLocalStorage(data, stageId);
        saveStagesToLocalStorage();
      }
    }

    function addOpportunity() {
      const input = document.getElementById('new-opportunity');
      const name = input.value.trim();
      if (!name) return;

      const id = 'opportunity-' + Date.now();
      const div = document.createElement('div');
      div.className = 'opportunity-list-item';
      div.id = id;
      div.draggable = true;
      div.ondragstart = drag;
      div.innerHTML = `
        ${name}
        <div class="opportunity-actions">
          <i class="fas fa-edit" onclick="editOpportunity(event, '${id}')"></i>
          <i class="fas fa-trash" onclick="deleteOpportunity(event, '${id}')"></i>
        </div>
      `;

      document.getElementById('opportunities-list').appendChild(div);
      input.value = '';
      saveOpportunitiesToLocalStorage();
    }

    function editOpportunity(event, id) {
      const item = document.getElementById(id);
      const current = item.firstChild.textContent.trim();
      const updated = prompt("Edit Opportunity", current);
      if (updated) {
        item.firstChild.textContent = updated;
        saveOpportunitiesToLocalStorage();
      }
    }

    function deleteOpportunity(event, id) {
      document.getElementById(id).remove();
      saveOpportunitiesToLocalStorage();
    }

    function saveOpportunitiesToLocalStorage() {
      const data = [];
      document.querySelectorAll('.opportunity-list-item').forEach(item => {
        data.push({
          id: item.id,
          name: item.firstChild.textContent.trim(),
          stage: getParentStage(item)
        });
      });
      localStorage.setItem('opportunities', JSON.stringify(data));
    }

    function getParentStage(item) {
      let parent = item.parentElement;
      while (parent && parent.id !== 'opportunities-list' && !parent.id.endsWith('-content')) {
        parent = parent.parentElement;
      }
      return parent ? parent.id : 'opportunities-list';
    }

    function loadOpportunitiesFromLocalStorage() {
      const data = JSON.parse(localStorage.getItem('opportunities')) || [];
      data.forEach(opp => {
        const div = document.createElement('div');
        div.className = 'opportunity-list-item';
        div.id = opp.id;
        div.draggable = true;
        div.ondragstart = drag;
        div.innerHTML = `
          ${opp.name}
          <div class="opportunity-actions">
            <i class="fas fa-edit" onclick="editOpportunity(event, '${opp.id}')"></i>
            <i class="fas fa-trash" onclick="deleteOpportunity(event, '${opp.id}')"></i>
          </div>
        `;

        const container = document.getElementById(opp.stage) || document.getElementById('opportunities-list');
        container.appendChild(div);
      });
    }

    function updateOpportunityStageInLocalStorage(id, newStage) {
      const data = JSON.parse(localStorage.getItem('opportunities')) || [];
      data.forEach(opp => {
        if (opp.id === id) opp.stage = newStage;
      });
      localStorage.setItem('opportunities', JSON.stringify(data));
    }

    function saveStagesToLocalStorage() {
      // Optional extra state persistence; already handled by saveOpportunitiesToLocalStorage
    }

    function loadStagesFromLocalStorage() {
      // Merged into loadOpportunitiesFromLocalStorage
    }
  </script>
</body>
</html>
